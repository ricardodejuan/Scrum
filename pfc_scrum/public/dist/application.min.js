"use strict";var ApplicationConfiguration=function(){var applicationModuleName="Scrum",applicationModuleVendorDependencies=["ngResource","ngAnimate","ui.router","ui.bootstrap","ui.utils","btford.socket-io","xeditable","ngDragDrop"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName),angular.module(moduleName).run(["editableOptions",function(editableOptions){editableOptions.theme="bs3"}])};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("phases"),ApplicationConfiguration.registerModule("projects"),ApplicationConfiguration.registerModule("sprints"),ApplicationConfiguration.registerModule("stories"),ApplicationConfiguration.registerModule("tasks"),ApplicationConfiguration.registerModule("users"),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]),angular.module("phases").factory("Phases",["$resource",function($resource){return $resource("sprints/:sprintId/phases/:phaseId",{sprintId:"@sprintId",phaseId:"@phaseId"},{update:{method:"PUT"}})}]),angular.module("projects").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Projects","projects","dropdown","/projects(/create)?"),Menus.addSubMenuItem("topbar","projects","List Projects","projects"),Menus.addSubMenuItem("topbar","projects","New Project","projects/create")}]),angular.module("projects").config(["$stateProvider",function($stateProvider){$stateProvider.state("listProjects",{url:"/projects",templateUrl:"modules/projects/views/list-projects.client.view.html"}).state("createProject",{url:"/projects/create",templateUrl:"modules/projects/views/create-project.client.view.html"}).state("viewProject",{url:"/projects/:projectId",templateUrl:"modules/projects/views/view-project.client.view.html"}).state("viewProject.listStories",{url:"/stories",templateUrl:"modules/stories/views/list-stories.client.view.html"}).state("viewProject.createSprint",{url:"/sprints",templateUrl:"modules/sprints/views/create-sprint.client.view.html"}).state("viewProject.viewSprint",{url:"/sprints/:sprintId",templateUrl:"modules/sprints/views/view-sprint.client.view.html"})}]);var projectsApp=angular.module("projects");projectsApp.controller("ProjectsController",["$scope","Authentication","Projects","$location",function($scope,Authentication,Projects,$location){$scope.authentication=Authentication,$scope.authentication.user||$location.path("/"),$scope.projects=Projects.query()}]),projectsApp.controller("ProjectsViewController",["$scope","$stateParams","Authentication","Projects","Sprints","$modal","$log","$http","$location",function($scope,$stateParams,Authentication,Projects,Sprints,$modal,$log,$http,$location){$scope.authentication=Authentication,$scope.authentication.user||$location.path("/"),$scope.project=Projects.get({projectId:$stateParams.projectId}),$scope.modal=function(size,selectedProject){var modalInstance=$modal.open({templateUrl:"modules/projects/views/edit-project.client.view.html",controller:["$scope","$modalInstance","project",function($scope,$modalInstance,project){$scope.project=project,$scope.ok=function(){$modalInstance.close($scope.project)},$scope.cancel=function(){$modalInstance.dismiss("cancel")}}],size:size,resolve:{project:function(){return selectedProject}}});modalInstance.result.then(function(selectedItem){$scope.selected=selectedItem},function(){$log.info("Modal dismissed at: "+new Date)})},$scope.leave=function(selectedProject){$http.put("/projects/"+selectedProject._id+"/leave").success(function(){$scope.project=null,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.modalViewMembers=function(size,selectedProject){var members=$http.get("/projects/"+selectedProject._id+"/members");$modal.open({templateUrl:"modules/projects/views/members-project.client.view.html",controller:["$scope","$modalInstance","users",function($scope,$modalInstance,users){$scope.users=users,$scope.cancel=function(){$modalInstance.dismiss("cancel")}}],size:size,resolve:{users:function(){return members.then(function(response){return response.data})}}})},$scope.modalAddMembers=function(size,selectedProject){$modal.open({templateUrl:"modules/projects/views/add-members-project.client.view.html",controller:["$scope","$modalInstance","project",function($scope,$modalInstance,project){$scope.project=project,$scope.cancel=function(){$modalInstance.dismiss("cancel")}}],size:size,resolve:{project:function(){return selectedProject}}})},$scope.getSprints=function(project){$scope.sprints=Sprints.query({projectId:project._id})}}]),projectsApp.controller("ProjectsAddMembersController",["$scope","$stateParams","Authentication","ProjectsNonMembers","$timeout","$log","$http","$location",function($scope,$stateParams,Authentication,ProjectsNonMembers,$timeout,$log,$http,$location){$scope.authentication=Authentication,$scope.authentication.user||$location.path("/");var timeout;$scope.$watch("username",function(newVal){newVal&&(timeout&&$timeout.cancel(timeout),timeout=$timeout(ProjectsNonMembers.nonMembers($stateParams.projectId,newVal).success(function(response){$scope.users=response}),350))}),$scope.addMember=function(selectedProject,user){$http.put("/projects/"+selectedProject._id+"/join",{users:[user]}).success(function(){$scope.users=null}).error(function(response){$scope.error=response.message})}}]),projectsApp.controller("ProjectsCrUpController",["$scope","Projects","Authentication","$location",function($scope,Projects,Authentication,$location){$scope.authentication=Authentication,$scope.authentication.user||$location.path("/"),$scope.create=function(){var project=new Projects({projectName:this.projectName,descriptionName:this.descriptionName,startTime:this.startTime,endTime:this.endTime});project.$save(function(response){$location.path("projects/"+response._id),$scope.projectName="",$scope.descriptionName="",$scope.startTime="",$scope.endTime=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.today=function(){$scope.startTime=new Date},$scope.clear=function(){$scope.startTime=null},$scope.openStartDT=function($event){$event.preventDefault(),$event.stopPropagation(),$scope.openedStartDT=!0},$scope.today=function(){$scope.endTime=new Date},$scope.clear=function(){$scope.endTime=null},$scope.openEndDT=function($event){$event.preventDefault(),$event.stopPropagation(),$scope.openedEndDT=!0},$scope.dateOptions={formatYear:"yy",startingDay:1},$scope.formats=["dd-MMMM-yyyy","yyyy/MM/dd","dd.MM.yyyy","shortDate"],$scope.format=$scope.formats[0],$scope.update=function(updatedProject){var project=updatedProject;project.$update(function(){},function(errorResponse){$scope.error=errorResponse.data.message})}}]),angular.module("projects").factory("Projects",["$resource","$http",function($resource){return $resource("projects/:projectId",{projectId:"@_id"},{update:{method:"PUT"}})}]).factory("ProjectsNonMembers",["$http",function($http){var nonMembersRequest=function(projectId,username){return $http.get("/projects/"+projectId+"/nonmembers/"+username)};return{nonMembers:function(projectId,username){return nonMembersRequest(projectId,username)}}}]);var sprintsApp=angular.module("sprints");sprintsApp.controller("SprintsCreateController",["$scope","$stateParams","Authentication","Sprints","$http","$location",function($scope,$stateParams,Authentication,Sprints,$http,$location){$scope.authentication=Authentication,$scope.authentication.user||$location.path("/"),$scope.create=function(){var s=new Sprints({sprintName:this.sprintName,sprintDescription:this.sprintDescription,sprintStartTime:this.sprintStartTime,sprintEndTime:this.sprintEndTime});s.$save({projectId:$stateParams.projectId},function(sprint){$location.path("projects/"+$stateParams.projectId+"/sprints/"+sprint._id),$scope.sprintName="",$scope.sprintDescription="",$scope.sprintStartTime="",$scope.sprintEndTime=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.today=function(){$scope.sprintStartTime=new Date},$scope.clear=function(){$scope.sprintStartTime=null},$scope.openStartDT=function($event){$event.preventDefault(),$event.stopPropagation(),$scope.openedStartDT=!0},$scope.today=function(){$scope.sprintEndTime=new Date},$scope.clear=function(){$scope.sprintEndTime=null},$scope.openEndDT=function($event){$event.preventDefault(),$event.stopPropagation(),$scope.openedEndDT=!0},$scope.dateOptions={formatYear:"yy",startingDay:1},$scope.formats=["dd-MMMM-yyyy","yyyy/MM/dd","dd.MM.yyyy","shortDate"],$scope.format=$scope.formats[0]}]),sprintsApp.controller("SprintsViewController",["$scope","$stateParams","Authentication","Sprints","Phases","Tasks","$http","$location",function($scope,$stateParams,Authentication,Sprints,Phases,Tasks,$http,$location){$scope.authentication=Authentication,$scope.authentication.user||$location.path("/"),$scope.sprint=Sprints.get({projectId:$stateParams.projectId,sprintId:$stateParams.sprintId}),$http.get("/projects/"+$stateParams.projectId+"/sprints/"+$stateParams.sprintId+"/backlog").then(function(result){$scope.stories=result.data}),$scope.phases=Phases.query({sprintId:$stateParams.sprintId}),$scope.createPhase=function(phaseName){var p=new Phases({phaseName:phaseName,position:$scope.phases.length+1});p.$save({sprintId:$stateParams.sprintId},function(phase){$scope.phases.push(phase)})},$scope.deletePhase=function(phase){$scope.handleDeletedPhase(phase._id),phase.$remove({sprintId:$stateParams.sprintId,phaseId:phase._id})},$scope.handleDeletedPhase=function(id){var oldPhases=$scope.phases,newPhases=[];angular.forEach(oldPhases,function(phase){phase._id!==id&&newPhases.push(phase)}),$scope.stories=newPhases}}]),angular.module("sprints").factory("Sprints",["$resource",function($resource){return $resource("projects/:projectId/sprints/:sprintId",{projectId:"@projectId",sprintId:"@sprintId"},{update:{method:"PUT"}})}]);var storiesApp=angular.module("stories");storiesApp.directive("stickyNote",["Socket","$stateParams",function(Socket,$stateParams){var linker=function(scope,element){switch(element.draggable({containment:".containment-wrapper",stop:function(event,ui){Socket.emit("story.moved",{id:scope.story._id,x:ui.position.left,y:ui.position.top,room:$stateParams.projectId}),scope.story.storyPosX=ui.position.left,scope.story.storyPosY=ui.position.top,scope.story.$update({storyId:scope.story._id})}}),Socket.on("on.story.moved",function(story){story.id===scope.story._id&&element.animate({left:story.x,top:story.y})}),element.css("left",scope.story.storyPosX+"px"),element.css("top",scope.story.storyPosY+"px"),scope.story.storyPriority){case"MUST":element.addClass("alert-danger");break;case"SHOULD":element.addClass("alert-warning");break;case"COULD":element.addClass("alert-info");break;case"WON'T":element.addClass("alert-success")}element.fadeIn()},controller=["$scope",function($scope){Socket.on("on.story.updated",function(story){story._id===$scope.story._id&&($scope.story.storyTitle=story.storyTitle,$scope.story.storyDescription=story.storyDescription)})}];return{restrict:"A",link:linker,controller:controller,scope:{story:"="}}}]),storiesApp.controller("StoriesController",["$scope","Socket","Stories","Authentication","$location","$stateParams","$modal","$http","Tasks",function($scope,Socket,Stories,Authentication,$location,$stateParams,$modal,$http,Tasks){$scope.authentication=Authentication,$scope.authentication.user||$location.path("/"),$scope.stories=Stories.query({projectId:$stateParams.projectId}),Socket.emit("story.room",$stateParams.projectId),Socket.on("on.story.created",function(story){$scope.stories.push(new Stories(story))}),Socket.on("on.story.deleted",function(story){$scope.handleDeletedStory(story.id)}),$scope.createStory=function(){var s=new Stories({storyTitle:"New Story",storyDescription:"Description",storyValue:1,storyPoint:1,storyPosX:70,storyPosY:120});s.$save({projectId:$stateParams.projectId},function(story){$scope.stories.push(story),Socket.emit("story.created",{story:story,room:$stateParams.projectId})})},$scope.deleteStory=function(story){$scope.handleDeletedStory(story._id),Socket.emit("story.deleted",{id:story._id,room:$stateParams.projectId}),story.$remove({projectId:$stateParams.projectId,storyId:story._id})},$scope.handleDeletedStory=function(id){var oldStories=$scope.stories,newStories=[];angular.forEach(oldStories,function(story){story._id!==id&&newStories.push(story)}),$scope.stories=newStories},$scope.updateStory=function(story){story.$update({storyId:story._id}),Socket.emit("story.updated",{story:story,room:$stateParams.projectId})},$scope.editStory=function(size,selectedStory){var modalInstance=$modal.open({templateUrl:"modules/stories/views/edit-story.client.view.html",controller:["$scope","$modalInstance","story",function($scope,$modalInstance,story){$scope.story=story,$scope.ok=function(){$modalInstance.close($scope.story)},$scope.cancel=function(){$modalInstance.dismiss("cancel")}}],size:size,resolve:{story:function(){return selectedStory}}});modalInstance.result.then(function(selectedItem){$scope.selected=selectedItem})},$scope.moveToSprint=function(size,selectedStory){var sprints=$http.get("/projects/"+$stateParams.projectId+"/sprintNotFinished"),moveStory=function(id){$scope.handleDeletedStory(id)};$modal.open({templateUrl:"modules/stories/views/move-to-sprint.client.view.html",controller:["$scope","$modalInstance","sprints","story",function($scope,$modalInstance,sprints,story){$scope.sprints=sprints,$scope.move=function(sprint){$http.put("/projects/"+$stateParams.projectId+"/storiesBacklog",{story:story,sprintId:sprint._id}).success(function(){moveStory(story._id),Socket.emit("story.deleted",{id:story._id,room:$stateParams.projectId}),$modalInstance.close(story)})},$scope.cancel=function(){$modalInstance.dismiss("cancel")}}],size:size,resolve:{sprints:function(){return sprints.then(function(response){return response.data})},story:function(){return selectedStory}}})},$scope.addTasks=function(size,selectedStory){$modal.open({templateUrl:"modules/stories/views/tasks.client.view.html",controller:["$scope","$modalInstance","story",function($scope,$modalInstance,story){$scope.story=story,$scope.tasks=Tasks.query({storyId:story._id}),$scope.move=function(){$modalInstance.close(story)},$scope.cancel=function(){$modalInstance.dismiss("cancel")}}],size:size,resolve:{story:function(){return selectedStory}}})}}]),storiesApp.controller("StoriesEditController",["$scope","$stateParams","Authentication","$location","Socket",function($scope,$stateParams,Authentication,$location,Socket){$scope.authentication=Authentication,$scope.authentication.user||$location.path("/"),$scope.priorities=["MUST","SHOULD","COULD","WON'T"],$scope.update=function(updatedStory){var story=updatedStory;story.$update({storyId:story._id}),Socket.emit("story.updated",{story:story,room:$stateParams.projectId})}}]),storiesApp.controller("TasksController",["$scope","$stateParams","Authentication","$location","Tasks","$log",function($scope,$stateParams,Authentication,$location,Tasks,$log){$scope.authentication=Authentication,$scope.authentication.user||$location.path("/"),$scope.priorities=["VERY HIGH","HIGH","MEDIUM","LOW","VERY LOW"],$scope.isTask=!0,$scope.createTask=function(story){var t=new Tasks({taskName:this.taskName,taskDescription:this.taskDescription,taskPriority:this.taskPriority,taskPoints:this.taskPoints,taskRemark:this.taskRemark,taskRuleValidation:this.taskRuleValidation});t.$save({storyId:story._id},function(task){$scope.tasks.push(task),$scope.taskName="",$scope.taskDescription="",$scope.taskPriority={},$scope.taskPoints=0,$scope.taskRemark="",$scope.taskRuleValidation=""})},$scope.deleteTask=function(task,story){$scope.handleDeletedTask(task._id),task.$remove({storyId:story._id,taskId:task._id})},$scope.handleDeletedTask=function(id){var oldTasks=$scope.tasks,newTasks=[];angular.forEach(oldTasks,function(task){task._id!==id&&newTasks.push(task)}),$scope.tasks=newTasks},$scope.viewTask=function(task){$scope.isTask=!1,$scope.selectedTask=task},$scope.updateTask=function(){$log.info($scope.story),$log.info($scope.selectedTask),$scope.selectedTask.$update({storyId:$scope.story._id,taskId:$scope.selectedTask._id})},$scope.checkTitle=function(data){return data.length>20?"Max length is 20":void 0}}]),angular.module("stories").factory("Socket",["$rootScope",function($rootScope){var socket=io("/stories").connect();return{on:function(eventName,callback){socket.on(eventName,function(){var args=arguments;$rootScope.$apply(function(){callback.apply(socket,args)})})},emit:function(eventName,data,callback){socket.emit(eventName,data,function(){var args=arguments;$rootScope.$apply(function(){callback&&callback.apply(socket,args)})})}}}]),angular.module("stories").factory("Stories",["$resource",function($resource){return $resource("projects/:projectId/stories/:storyId",{projectId:"@projectId",storyId:"@storyId"},{update:{method:"PUT"}})}]),angular.module("tasks").factory("Tasks",["$resource",function($resource){return $resource("stories/:storyId/tasks/:taskId",{storyId:"@storyId",taskId:"@taskId"},{update:{method:"PUT"}})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invalid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]);