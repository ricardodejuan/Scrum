"use strict";var ApplicationConfiguration=function(){var applicationModuleName="Scrum",applicationModuleVendorDependencies=["ngResource","ngAnimate","ui.router","ui.bootstrap","ui.utils","btford.socket-io","xeditable","checklist-model","ngDragDrop","highcharts-ng"],registerModule=function(moduleName,dependencies){angular.module(moduleName,dependencies||[]),angular.module(applicationModuleName).requires.push(moduleName),angular.module(moduleName).run(["editableOptions",function(editableOptions){editableOptions.theme="bs3"}])};return{applicationModuleName:applicationModuleName,applicationModuleVendorDependencies:applicationModuleVendorDependencies,registerModule:registerModule}}();angular.module(ApplicationConfiguration.applicationModuleName,ApplicationConfiguration.applicationModuleVendorDependencies),angular.module(ApplicationConfiguration.applicationModuleName).config(["$locationProvider",function($locationProvider){$locationProvider.hashPrefix("!")}]),angular.element(document).ready(function(){angular.bootstrap(document,[ApplicationConfiguration.applicationModuleName])}),ApplicationConfiguration.registerModule("core"),ApplicationConfiguration.registerModule("dailies"),ApplicationConfiguration.registerModule("phases"),ApplicationConfiguration.registerModule("projects"),ApplicationConfiguration.registerModule("sprints"),ApplicationConfiguration.registerModule("stories"),ApplicationConfiguration.registerModule("tasks"),ApplicationConfiguration.registerModule("users"),angular.module("core").config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("home",{url:"/",templateUrl:"modules/core/views/home.client.view.html"})}]),angular.module("core").controller("HeaderController",["$scope","Authentication","Menus",function($scope,Authentication,Menus){$scope.authentication=Authentication,$scope.isCollapsed=!1,$scope.menu=Menus.getMenu("topbar"),$scope.toggleCollapsibleMenu=function(){$scope.isCollapsed=!$scope.isCollapsed},$scope.$on("$stateChangeSuccess",function(){$scope.isCollapsed=!1})}]),angular.module("core").controller("HomeController",["$scope","Authentication",function($scope,Authentication){$scope.authentication=Authentication}]),angular.module("core").service("Menus",[function(){this.defaultRoles=["*"],this.menus={};var shouldRender=function(user){if(!user)return this.isPublic;if(~this.roles.indexOf("*"))return!0;for(var userRoleIndex in user.roles)for(var roleIndex in this.roles)if(this.roles[roleIndex]===user.roles[userRoleIndex])return!0;return!1};this.validateMenuExistance=function(menuId){if(menuId&&menuId.length){if(this.menus[menuId])return!0;throw new Error("Menu does not exists")}throw new Error("MenuId was not provided")},this.getMenu=function(menuId){return this.validateMenuExistance(menuId),this.menus[menuId]},this.addMenu=function(menuId,isPublic,roles){return this.menus[menuId]={isPublic:isPublic||!1,roles:roles||this.defaultRoles,items:[],shouldRender:shouldRender},this.menus[menuId]},this.removeMenu=function(menuId){this.validateMenuExistance(menuId),delete this.menus[menuId]},this.addMenuItem=function(menuId,menuItemTitle,menuItemURL,menuItemType,menuItemUIRoute,isPublic,roles,position){return this.validateMenuExistance(menuId),this.menus[menuId].items.push({title:menuItemTitle,link:menuItemURL,menuItemType:menuItemType||"item",menuItemClass:menuItemType,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].roles:roles,position:position||0,items:[],shouldRender:shouldRender}),this.menus[menuId]},this.addSubMenuItem=function(menuId,rootMenuItemURL,menuItemTitle,menuItemURL,menuItemUIRoute,isPublic,roles,position){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===rootMenuItemURL&&this.menus[menuId].items[itemIndex].items.push({title:menuItemTitle,link:menuItemURL,uiRoute:menuItemUIRoute||"/"+menuItemURL,isPublic:null===isPublic||"undefined"==typeof isPublic?this.menus[menuId].items[itemIndex].isPublic:isPublic,roles:null===roles||"undefined"==typeof roles?this.menus[menuId].items[itemIndex].roles:roles,position:position||0,shouldRender:shouldRender});return this.menus[menuId]},this.removeMenuItem=function(menuId,menuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)this.menus[menuId].items[itemIndex].link===menuItemURL&&this.menus[menuId].items.splice(itemIndex,1);return this.menus[menuId]},this.removeSubMenuItem=function(menuId,submenuItemURL){this.validateMenuExistance(menuId);for(var itemIndex in this.menus[menuId].items)for(var subitemIndex in this.menus[menuId].items[itemIndex].items)this.menus[menuId].items[itemIndex].items[subitemIndex].link===submenuItemURL&&this.menus[menuId].items[itemIndex].items.splice(subitemIndex,1);return this.menus[menuId]},this.addMenu("topbar")}]);var dailiesApp=angular.module("dailies");dailiesApp.controller("DailyScrumController",["$scope","$stateParams","Authentication","$location","Dailies","$modal",function($scope,$stateParams,Authentication,$location,Dailies,$modal){$scope.authentication=Authentication,$scope.authentication.user||$location.path("/"),$scope.dailies=Dailies.query({sprintId:$stateParams.sprintId}),$scope.createDaily=function(){var ds=new Dailies({did:"",willDo:"",impediments:"",date:new Date,sprintId:$stateParams.sprintId});ds.$save({sprintId:$stateParams.sprintId},function(daily){$scope.dailies.push(daily)})},$scope.editDaily=function(size,selectedDaily){$modal.open({templateUrl:"modules/dailies/views/view-daily.client.view.html",controller:["$scope","$modalInstance","daily",function($scope,$modalInstance,daily){$scope.daily=daily,$scope.ok=function(){$modalInstance.close($scope.daily)},$scope.cancel=function(){$modalInstance.dismiss("cancel")}}],size:size,resolve:{daily:function(){return selectedDaily}}})}}]),dailiesApp.controller("DailyScrumUpdateController",["$scope","$stateParams","Authentication","$location","Dailies",function($scope,$stateParams,Authentication,$location){$scope.authentication=Authentication,$scope.authentication.user||$location.path("/"),$scope.today=function(){$scope.startTime=new Date},$scope.clear=function(){$scope.startTime=null},$scope.openStartDT=function($event){$event.preventDefault(),$event.stopPropagation(),$scope.openedStartDT=!0},$scope.dateOptions={formatYear:"yy",startingDay:1},$scope.formats=["dd-MMMM-yyyy","yyyy/MM/dd","dd.MM.yyyy","shortDate"],$scope.format=$scope.formats[0],$scope.update=function(updatedDaily){var daily=updatedDaily;daily.$update({sprintId:$stateParams.sprintId,dailyId:daily._id},function(){},function(errorResponse){$scope.error=errorResponse.data.message})}}]),angular.module("dailies").factory("Dailies",["$resource",function($resource){return $resource("sprints/:sprintId/dailies/:dailyId",{sprintId:"@sprintId",dailyId:"@dailyId"},{update:{method:"PUT"}})}]),angular.module("phases").factory("Phases",["$resource",function($resource){return $resource("sprints/:sprintId/phases/:phaseId",{sprintId:"@sprintId",phaseId:"@phaseId"},{update:{method:"PUT"}})}]),angular.module("projects").run(["Menus",function(Menus){Menus.addMenuItem("topbar","Projects","projects","dropdown","/projects(/create)?"),Menus.addSubMenuItem("topbar","projects","List Projects","projects"),Menus.addSubMenuItem("topbar","projects","New Project","projects/create")}]),angular.module("projects").config(["$stateProvider",function($stateProvider){$stateProvider.state("listProjects",{url:"/projects",templateUrl:"modules/projects/views/list-projects.client.view.html"}).state("createProject",{url:"/projects/create",templateUrl:"modules/projects/views/create-project.client.view.html"}).state("viewProject",{url:"/projects/:projectId",templateUrl:"modules/projects/views/view-project.client.view.html"}).state("viewProject.listStories",{url:"/stories",templateUrl:"modules/stories/views/list-stories.client.view.html"}).state("viewProject.createSprint",{url:"/createSprint",templateUrl:"modules/sprints/views/create-sprint.client.view.html"}).state("viewProject.viewSprint",{url:"/sprints/:sprintId",templateUrl:"modules/sprints/views/view-sprint.client.view.html"}).state("viewProject.viewSprint.dashboard",{url:"/dashboard",templateUrl:"modules/sprints/views/sprint-dashboard.client.view.html"}).state("viewProject.viewSprint.listDailies",{url:"/dailies",templateUrl:"modules/dailies/views/list-dailies.client.view.html"})}]);var projectsApp=angular.module("projects");projectsApp.controller("ProjectsController",["$scope","Authentication","Projects","$location",function($scope,Authentication,Projects,$location){$scope.authentication=Authentication,$scope.authentication.user||$location.path("/"),$scope.projects=Projects.query()}]),projectsApp.controller("ProjectsViewController",["$scope","$stateParams","Authentication","Projects","Sprints","$modal","$log","$http","$location",function($scope,$stateParams,Authentication,Projects,Sprints,$modal,$log,$http,$location){$scope.authentication=Authentication,$scope.authentication.user||$location.path("/"),$scope.project=Projects.get({projectId:$stateParams.projectId}),$scope.modal=function(size,selectedProject){var modalInstance=$modal.open({templateUrl:"modules/projects/views/edit-project.client.view.html",controller:["$scope","$modalInstance","project",function($scope,$modalInstance,project){$scope.project=project,$scope.ok=function(){$modalInstance.close($scope.project)},$scope.cancel=function(){$modalInstance.dismiss("cancel")}}],size:size,resolve:{project:function(){return selectedProject}}});modalInstance.result.then(function(selectedItem){$scope.selected=selectedItem},function(){$log.info("Modal dismissed at: "+new Date)})},$scope.leave=function(selectedProject){$http.put("/projects/"+selectedProject._id+"/leave").success(function(){$scope.project=null,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.modalViewMembers=function(size,selectedProject){var members=$http.get("/projects/"+selectedProject._id+"/members");$modal.open({templateUrl:"modules/projects/views/members-project.client.view.html",controller:["$scope","$modalInstance","users",function($scope,$modalInstance,users){$scope.users=users,$scope.cancel=function(){$modalInstance.dismiss("cancel")}}],size:size,resolve:{users:function(){return members.then(function(response){return response.data})}}})},$scope.modalAddMembers=function(size,selectedProject){$modal.open({templateUrl:"modules/projects/views/add-members-project.client.view.html",controller:["$scope","$modalInstance","project",function($scope,$modalInstance,project){$scope.project=project,$scope.cancel=function(){$modalInstance.dismiss("cancel")}}],size:size,resolve:{project:function(){return selectedProject}}})},$scope.getSprints=function(project){$scope.sprints=Sprints.query({projectId:project._id})},$scope.sprintBurnDownChart=function(size,selectedProject){var stories=$http.get("/projects/"+selectedProject._id+"/allStories");$modal.open({templateUrl:"modules/projects/views/project-burndownchart.client.view.html",controller:ProjectBurnDownChartController,size:size,resolve:{project:function(){return selectedProject},stories:function(){return stories.then(function(response){return response.data})}}})};var ProjectBurnDownChartController=["$scope","$modalInstance","project","stories",function($scope,$modalInstance,project,stories){function dayDiff(first,second){return(second-first)/864e5}$scope.authentication=Authentication,$scope.authentication.user||$location.path("/"),$scope.stories=stories,$scope.ok=function(){$modalInstance.close(project)};var currentData=[],estimateData=[],currentStoryPoints=0,totalStoryPoints=0,today=new Date,modified=!1,totalDays=dayDiff(new Date(project.startTime).getTime(),new Date(project.endTime).getTime())+1,dayLabel=dayDiff(new Date(project.startTime).getTime(),new Date(today.getFullYear(),today.getMonth(),today.getDate()).getTime())+1;angular.forEach(stories,function(story){story.storyFinished||(currentStoryPoints+=story.storyPoint),totalStoryPoints+=story.storyPoint});for(var d=totalStoryPoints/(totalDays-1),k=0;totalDays>k;k++)estimateData.push(0===k?totalStoryPoints:k+1===totalDays?0:Math.round(100*(estimateData[k-1]-d))/100);for(var j=0;j<=project.projectBurnDownChart.length;j++)!project.projectBurnDownChart.length||project.projectBurnDownChart.length<dayLabel?(project.projectBurnDownChart.push({storyPoints:currentStoryPoints,day:dayLabel}),modified=!0):j<project.projectBurnDownChart.length&&project.projectBurnDownChart[j].day===dayLabel&&project.projectBurnDownChart[j].storyPoints!==currentStoryPoints&&(project.projectBurnDownChart[j].storyPoints=currentStoryPoints,modified=!0),j<project.projectBurnDownChart.length&&currentData.push(project.projectBurnDownChart[j].storyPoints);modified&&project.$update({projectId:project._id}),$scope.chartConfig={options:{chart:{type:"line",zoomType:"x"}},series:[{data:currentData,name:"Actual",color:"#FF0000"},{data:estimateData,name:"Estimated",color:"#66CCFF"}],title:{text:""},xAxis:{currentMin:0,currentMax:totalDays,minRange:1,title:{text:"Days"}},yAxis:{currentMin:0,currentMax:totalStoryPoints,minRange:2,title:{text:"Story Points"}},loading:!1,plotOptions:{line:{dataLabels:{enabled:!0},enableMouseTracking:!1}}}}]}]),projectsApp.controller("ProjectsAddMembersController",["$scope","$stateParams","Authentication","ProjectsNonMembers","$timeout","$log","$http","$location",function($scope,$stateParams,Authentication,ProjectsNonMembers,$timeout,$log,$http,$location){$scope.authentication=Authentication,$scope.authentication.user||$location.path("/"),$scope.roles=["SCRUM_MASTER","PRODUCT_OWNER","TEAM","STAKEHOLDER"];var timeout;$scope.$watch("username",function(newVal){newVal&&(timeout&&$timeout.cancel(timeout),timeout=$timeout(ProjectsNonMembers.nonMembers($stateParams.projectId,newVal).success(function(response){$scope.users=response}),350))}),$scope.addMember=function(selectedProject,user,role){user.role=role,$http.put("/projects/"+selectedProject._id+"/join",{users:[user]}).success(function(){$scope.users=null}).error(function(response){$scope.error=response.message})}}]),projectsApp.controller("ProjectsCrUpController",["$scope","Projects","Authentication","$location",function($scope,Projects,Authentication,$location){$scope.authentication=Authentication,$scope.authentication.user||$location.path("/"),$scope.create=function(){var project=new Projects({projectName:this.projectName,descriptionName:this.descriptionName,startTime:this.startTime,endTime:this.endTime});project.$save(function(response){$location.path("projects/"+response._id),$scope.projectName="",$scope.descriptionName="",$scope.startTime="",$scope.endTime=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.today=function(){$scope.startTime=new Date},$scope.clear=function(){$scope.startTime=null},$scope.openStartDT=function($event){$event.preventDefault(),$event.stopPropagation(),$scope.openedStartDT=!0},$scope.today=function(){$scope.endTime=new Date},$scope.clear=function(){$scope.endTime=null},$scope.openEndDT=function($event){$event.preventDefault(),$event.stopPropagation(),$scope.openedEndDT=!0},$scope.dateOptions={formatYear:"yy",startingDay:1},$scope.formats=["dd-MMMM-yyyy","yyyy/MM/dd","dd.MM.yyyy","shortDate"],$scope.format=$scope.formats[0],$scope.update=function(updatedProject){var project=updatedProject;project.$update(function(){},function(errorResponse){$scope.error=errorResponse.data.message})}}]),angular.module("projects").factory("Projects",["$resource","$http",function($resource){return $resource("projects/:projectId",{projectId:"@_id"},{update:{method:"PUT"}})}]).factory("ProjectsNonMembers",["$http",function($http){var nonMembersRequest=function(projectId,username){return $http.get("/projects/"+projectId+"/nonmembers/"+username)};return{nonMembers:function(projectId,username){return nonMembersRequest(projectId,username)}}}]);var sprintsApp=angular.module("sprints");sprintsApp.controller("SprintsCreateUpdateController",["$scope","$stateParams","Authentication","Sprints","$http","$location","SocketSprint",function($scope,$stateParams,Authentication,Sprints,$http,$location,SocketSprint){$scope.authentication=Authentication,$scope.authentication.user||$location.path("/"),$scope.create=function(){var s=new Sprints({sprintName:this.sprintName,sprintDescription:this.sprintDescription,sprintStartTime:this.sprintStartTime,sprintEndTime:this.sprintEndTime});s.$save({projectId:$stateParams.projectId},function(sprint){$location.path("projects/"+$stateParams.projectId+"/sprints/"+sprint._id),$scope.sprintName="",$scope.sprintDescription="",$scope.sprintStartTime="",$scope.sprintEndTime=""},function(errorResponse){$scope.error=errorResponse.data.message})},$scope.today=function(){$scope.sprintStartTime=new Date},$scope.clear=function(){$scope.sprintStartTime=null},$scope.openStartDT=function($event){$event.preventDefault(),$event.stopPropagation(),$scope.openedStartDT=!0},$scope.today=function(){$scope.sprintEndTime=new Date},$scope.clear=function(){$scope.sprintEndTime=null},$scope.openEndDT=function($event){$event.preventDefault(),$event.stopPropagation(),$scope.openedEndDT=!0},$scope.dateOptions={formatYear:"yy",startingDay:1},$scope.formats=["dd-MMMM-yyyy","yyyy/MM/dd","dd.MM.yyyy","shortDate"],$scope.format=$scope.formats[0],$scope.update=function(updatedSprint){var sprint=updatedSprint;sprint.$update({sprintId:updatedSprint._id},function(response){SocketSprint.emit("sprint.updated",{sprint:response,room:$stateParams.sprintId})},function(errorResponse){$scope.error=errorResponse.data.message})}}]),sprintsApp.controller("SprintsViewController",["$scope","$stateParams","Authentication","Sprints","Phases","Tasks","Stories","$http","$location","$modal","SocketSprint","$log",function($scope,$stateParams,Authentication,Sprints,Phases,Tasks,Stories,$http,$location,$modal){$scope.authentication=Authentication,$scope.authentication.user||$location.path("/"),$scope.stories=[],$scope.sprint=Sprints.get({projectId:$stateParams.projectId,sprintId:$stateParams.sprintId});var tasks=[];$http.get("/projects/"+$stateParams.projectId+"/sprints/"+$stateParams.sprintId+"/backlog").then(function(result){angular.forEach(result.data,function(s){$scope.stories.push(new Stories(s)),Tasks.query({storyId:s._id},function(result){angular.forEach(result,function(t){tasks.push(t)})})}),$scope.tasks=tasks}),$scope.editSprint=function(size,selectedSprint){$modal.open({templateUrl:"modules/sprints/views/edit-sprint.client.view.html",controller:["$scope","$modalInstance","sprint",function($scope,$modalInstance,sprint){$scope.sprint=sprint,$scope.ok=function(){$modalInstance.close($scope.sprint)},$scope.cancel=function(){$modalInstance.dismiss("cancel")}}],size:size,resolve:{sprint:function(){return selectedSprint}}})},$scope.sprintBurnDownChart=function(size,selectedSprint,setStories,setTasks){$modal.open({templateUrl:"modules/sprints/views/sprint-burndownchart.client.view.html",controller:SprintBurnDownChartController,size:size,resolve:{sprint:function(){return selectedSprint},stories:function(){return setStories},tasks:function(){return setTasks}}})};var SprintBurnDownChartController=["$scope","$modalInstance","sprint","stories","tasks",function($scope,$modalInstance,sprint,stories,tasks){function dayDiff(first,second){return(second-first)/864e5}$scope.authentication=Authentication,$scope.authentication.user||$location.path("/"),$scope.stories=stories,$scope.ok=function(){$modalInstance.close(sprint)};var currentData=[],estimateData=[],currentHours=0,totalHours=0,today=new Date,modified=!1,totalDays=dayDiff(new Date(sprint.sprintStartTime).getTime(),new Date(sprint.sprintEndTime).getTime())+1,dayLabel=dayDiff(new Date(sprint.sprintStartTime).getTime(),new Date(today.getFullYear(),today.getMonth(),today.getDate()).getTime())+1;angular.forEach(tasks,function(t){t.taskFinished||(currentHours+=t.taskHours),totalHours+=t.taskHours});for(var d=totalHours/(totalDays-1),k=0;totalDays>k;k++)estimateData.push(0===k?totalHours:k+1===totalDays?0:Math.round(100*(estimateData[k-1]-d))/100);for(var j=0;j<=sprint.sprintBurnDownChart.length;j++)!sprint.sprintBurnDownChart.length||sprint.sprintBurnDownChart.length<dayLabel?(sprint.sprintBurnDownChart.push({storyPoints:currentHours,day:dayLabel}),modified=!0):j<sprint.sprintBurnDownChart.length&&sprint.sprintBurnDownChart[j].day===dayLabel&&sprint.sprintBurnDownChart[j].storyPoints!==currentHours&&(sprint.sprintBurnDownChart[j].storyPoints=currentHours,modified=!0),j<sprint.sprintBurnDownChart.length&&currentData.push(sprint.sprintBurnDownChart[j].storyPoints);modified&&sprint.$update({sprintId:sprint._id}),$scope.chartConfig={options:{chart:{type:"line",zoomType:"x"}},series:[{data:currentData,name:"Actual",color:"#FF0000"},{data:estimateData,name:"Estimated",color:"#66CCFF"}],title:{text:""},xAxis:{currentMin:0,currentMax:totalDays,minRange:1,title:{text:"Days"}},yAxis:{currentMin:0,currentMax:totalHours,minRange:2,title:{text:"Hours"}},loading:!1,plotOptions:{line:{dataLabels:{enabled:!0},enableMouseTracking:!1}}}}];$scope.sprintReview=function(size,selectedSprint,setStories){$modal.open({templateUrl:"modules/sprints/views/sprint-review.client.view.html",controller:["$scope","$modalInstance","sprint","stories",function($scope,$modalInstance,sprint,stories){$scope.sprint=sprint,$scope.stories=stories,$scope.ok=function(){$modalInstance.close($scope.sprint)},$scope.cancel=function(){$modalInstance.dismiss("cancel")}}],size:size,resolve:{sprint:function(){return selectedSprint},stories:function(){return setStories}}})},$scope.sprintRestrospective=function(size,selectedSprint){$modal.open({templateUrl:"modules/sprints/views/sprint-retrospective.client.view.html",controller:["$scope","$modalInstance","sprint",function($scope,$modalInstance,sprint){$scope.sprint=sprint,$scope.ok=function(){$modalInstance.close($scope.sprint)},$scope.cancel=function(){$modalInstance.dismiss("cancel")}}],size:size,resolve:{sprint:function(){return selectedSprint}}})}}]),sprintsApp.controller("SprintsDashboardController",["$scope","$stateParams","Authentication","Sprints","Phases","Tasks","Stories","$http","$location","$modal","SocketSprint","$log",function($scope,$stateParams,Authentication,Sprints,Phases,Tasks,Stories,$http,$location,$modal,SocketSprint){$scope.authentication=Authentication,$scope.authentication.user||$location.path("/"),$scope.tasks=[],$scope.stories=[],$scope.phases=Phases.query({sprintId:$stateParams.sprintId}),$scope.sprint=Sprints.get({projectId:$stateParams.projectId,sprintId:$stateParams.sprintId}),this.toggler={},SocketSprint.emit("sprint.room",$stateParams.sprintId),$http.get("/projects/"+$stateParams.projectId+"/sprints/"+$stateParams.sprintId+"/backlog").then(function(result){if(angular.forEach(result.data,function(s){$scope.stories.push(new Stories(s))}),$scope.stories.length>0){var tasks=[];angular.forEach($scope.stories,function(story){Tasks.query({storyId:story._id},function(result){angular.forEach(result,function(t){tasks.push(t)})})}),$scope.tasks=tasks}}),$scope.createPhase=function(){var p=new Phases({phaseName:this.phaseName,position:$scope.phases.length});p.$save({sprintId:$stateParams.sprintId},function(phase){$scope.phases.push(phase),SocketSprint.emit("phase.created",{phase:phase,room:$stateParams.sprintId})})},$scope.editPhase=function(phase){phase.$update({phaseId:phase._id},function(response){SocketSprint.emit("phase.updated",{phase:response,room:$stateParams.sprintId})})},$scope.deletePhase=function(phase){$scope.handleDeletedPhase(phase._id),SocketSprint.emit("phase.deleted",{id:phase._id,room:$stateParams.sprintId}),phase.$remove({sprintId:$stateParams.sprintId,phaseId:phase._id})},$scope.deleteTask=function(task){$scope.handleDeletedTask(task._id),SocketSprint.emit("task.deleted",{id:task._id,room:$stateParams.sprintId}),task.$remove({taskId:task._id})},$scope.movePB=function(story){$scope.handleDeletedStory(story._id),SocketSprint.emit("story.returned",{id:story._id,room:$stateParams.sprintId}),$scope.handleDeletedTaskByStory(story._id),SocketSprint.emit("task.returned",{id:story._id,room:$stateParams.sprintId}),$http.put("/projects/"+$stateParams.projectId+"/stories/"+story._id+"/productBacklog")},$scope.toggleState=function(event,ui,phase){this.toggler.phaseId=phase._id;var length=$scope.phases.length-1;this.toggler.taskFinished=phase._id===$scope.phases[length]._id?!0:!1;var task=new Tasks(this.toggler);task.$update({storyId:task.storyId,taskId:task._id}),SocketSprint.emit("task.moved",{task:this.toggler,room:$stateParams.sprintId}),$scope.handleMovedTask(this.toggler)},$scope.existTasks=function(phase){if(0===phase.position)return!0;var exist=!1;return angular.forEach($scope.tasks,function(task){task.phaseId===phase._id&&(exist=!0)}),exist},$scope.handleUpdatedTask=function(task){var oldTasks=$scope.tasks,newTasks=[];angular.forEach(oldTasks,function(t){newTasks.push(t._id===task._id?new Tasks(task):t)}),$scope.tasks=newTasks},$scope.handleMovedTask=function(task){var ndx=$scope.tasks.map(function(t){return t._id}).indexOf(task._id);$scope.tasks.push(task),$scope.tasks.splice(ndx,1),this.toggler={}},$scope.handleDeletedTask=function(id){var oldTasks=$scope.tasks,newTasks=[];angular.forEach(oldTasks,function(task){task._id!==id&&newTasks.push(task)}),$scope.tasks=newTasks},$scope.handleDeletedTaskByStory=function(id){var oldTasks=$scope.tasks,newTasks=[];angular.forEach(oldTasks,function(task){task.storyId!==id&&newTasks.push(task)}),$scope.tasks=newTasks},$scope.handleUpdatedPhase=function(phase){var oldPhases=$scope.phases,newPhases=[];angular.forEach(oldPhases,function(p){newPhases.push(p._id===phase._id?new Phases(phase):p)}),$scope.phases=newPhases},$scope.handleDeletedPhase=function(id){var oldPhases=$scope.phases,newPhases=[];angular.forEach(oldPhases,function(phase){phase._id!==id&&newPhases.push(phase)}),$scope.phases=newPhases},$scope.handleUpdatedStory=function(story){var oldStories=$scope.stories,newStories=[];angular.forEach(oldStories,function(s){newStories.push(s._id===story._id?new Stories(story):s)}),$scope.stories=newStories},$scope.handleDeletedStory=function(id){var oldStories=$scope.stories,newStories=[];angular.forEach(oldStories,function(story){story._id!==id&&newStories.push(story)}),$scope.stories=newStories},$scope.editStory=function(size,selectedStory){$modal.open({templateUrl:"modules/stories/views/edit-story.client.view.html",controller:["$scope","$modalInstance","story",function($scope,$modalInstance,story){$scope.story=story,$scope.ok=function(){SocketSprint.emit("story.updated",{story:$scope.story,room:$stateParams.sprintId}),$modalInstance.close($scope.story)},$scope.cancel=function(){$modalInstance.dismiss("cancel")}}],size:size,resolve:{story:function(){return selectedStory}}})},$scope.addTask=function(size,selectedStory){$modal.open({templateUrl:"modules/tasks/views/add-task.client.view.html",controller:["$scope","$modalInstance","story",function($scope,$modalInstance,story){$scope.story=story,$scope.ok=function(){$modalInstance.close()}}],size:size,resolve:{story:function(){return selectedStory}}})},$scope.editTask=function(size,selectedTask){$modal.open({templateUrl:"modules/tasks/views/edit-task.client.view.html",controller:["$scope","$modalInstance","task",function($scope,$modalInstance,task){$scope.task=task,$scope.ok=function(){$modalInstance.close()},$scope.cancel=function(){$modalInstance.dismiss("cancel")}}],size:size,resolve:{task:function(){return selectedTask}}})},SocketSprint.on("on.phase.created",function(phase){$scope.phases.push(new Phases(phase))}),SocketSprint.on("on.phase.updated",function(phase){$scope.handleUpdatedPhase(phase)}),SocketSprint.on("on.phase.deleted",function(phase){$scope.handleDeletedPhase(phase.id)}),SocketSprint.on("on.story.updated",function(story){$scope.handleUpdatedStory(story)}),SocketSprint.on("on.story.returned",function(story){$scope.handleDeletedStory(story.id)}),SocketSprint.on("on.task.created",function(task){$scope.tasks.push(new Tasks(task))}),SocketSprint.on("on.task.updated",function(task){$scope.handleUpdatedTask(task)}),SocketSprint.on("on.task.returned",function(data){$scope.handleDeletedTaskByStory(data.id)}),SocketSprint.on("on.task.moved",function(task){$scope.handleMovedTask(task)}),SocketSprint.on("on.task.deleted",function(task){$scope.handleDeletedTask(task.id)}),SocketSprint.on("on.sprint.updated",function(sprint){$scope.sprint=sprint})}]),angular.module("sprints").factory("SocketSprint",["$rootScope",function($rootScope){var socket=io("/sprints").connect();return{on:function(eventName,callback){socket.on(eventName,function(){var args=arguments;$rootScope.$apply(function(){callback.apply(socket,args)})})},emit:function(eventName,data,callback){socket.emit(eventName,data,function(){var args=arguments;$rootScope.$apply(function(){callback&&callback.apply(socket,args)})})}}}]),angular.module("sprints").factory("Sprints",["$resource",function($resource){return $resource("projects/:projectId/sprints/:sprintId",{projectId:"@projectId",sprintId:"@sprintId"},{update:{method:"PUT"}})}]);var storiesApp=angular.module("stories");storiesApp.directive("stickyNote",["SocketPB","$stateParams",function(SocketPB,$stateParams){var linker=function(scope,element){function priotiy(element,story){switch(story.storyPriority){case"MUST":element.addClass("alert-danger");break;case"SHOULD":element.addClass("alert-warning");break;case"COULD":element.addClass("alert-info");break;case"WON'T":element.addClass("alert-success")}}element.draggable({containment:".containment-wrapper",stop:function(event,ui){SocketPB.emit("story.moved",{id:scope.story._id,x:ui.position.left,y:ui.position.top,room:$stateParams.projectId}),scope.story.storyPosX=ui.position.left,scope.story.storyPosY=ui.position.top,scope.story.$update({storyId:scope.story._id})}}),SocketPB.on("on.story.moved",function(story){story.id===scope.story._id&&element.animate({left:story.x,top:story.y})}),element.css("left",scope.story.storyPosX+"px"),element.css("top",scope.story.storyPosY+"px"),priotiy(element,scope.story),element.fadeIn()},controller=["$scope",function($scope){SocketPB.on("on.story.updated",function(story){story._id===$scope.story._id&&($scope.story.storyTitle=story.storyTitle,$scope.story.storyDescription=story.storyDescription)})}];return{restrict:"A",link:linker,controller:controller,scope:{story:"="}}}]),storiesApp.controller("StoriesController",["$scope","SocketPB","Stories","Authentication","$location","$stateParams","$modal","$http","Tasks",function($scope,SocketPB,Stories,Authentication,$location,$stateParams,$modal,$http){$scope.authentication=Authentication,$scope.authentication.user||$location.path("/"),$scope.stories=Stories.query({projectId:$stateParams.projectId}),SocketPB.emit("story.room",$stateParams.projectId),SocketPB.on("on.story.created",function(story){$scope.stories.push(new Stories(story))}),SocketPB.on("on.story.updated",function(story){$scope.handleUpdatedStory(story)}),SocketPB.on("on.story.deleted",function(story){$scope.handleDeletedStory(story.id)}),$scope.createStory=function(){var s=new Stories({storyTitle:"New Story",storyDescription:"Description",storyValue:1,storyPoint:1,storyPosX:70,storyPosY:120});s.$save({projectId:$stateParams.projectId},function(story){$scope.stories.push(story),SocketPB.emit("story.created",{story:story,room:$stateParams.projectId})})},$scope.deleteStory=function(story){$scope.handleDeletedStory(story._id),SocketPB.emit("story.deleted",{id:story._id,room:$stateParams.projectId}),story.$remove({projectId:$stateParams.projectId,storyId:story._id})},$scope.handleDeletedStory=function(id){var oldStories=$scope.stories,newStories=[];angular.forEach(oldStories,function(story){story._id!==id&&newStories.push(story)
}),$scope.stories=newStories},$scope.handleUpdatedStory=function(story){var oldStories=$scope.stories,newStories=[];angular.forEach(oldStories,function(s){newStories.push(s._id===story._id?new Stories(story):s)}),$scope.stories=newStories},$scope.updateStory=function(story){story.$update({storyId:story._id}),SocketPB.emit("story.updated",{story:story,room:$stateParams.projectId})},$scope.editStory=function(size,selectedStory){function updateStoryList(story){$scope.handleUpdatedStory(story)}$modal.open({templateUrl:"modules/stories/views/edit-story.client.view.html",controller:["$scope","$modalInstance","story",function($scope,$modalInstance,story){$scope.story=story,$scope.ok=function(){SocketPB.emit("story.updated",{story:$scope.story,room:$stateParams.projectId}),updateStoryList($scope.story),$modalInstance.close()},$scope.cancel=function(){$modalInstance.dismiss("cancel")}}],size:size,resolve:{story:function(){return selectedStory}}})},$scope.moveToSprint=function(size,selectedStory){var sprints=$http.get("/projects/"+$stateParams.projectId+"/sprintNotFinished"),moveStory=function(id){$scope.handleDeletedStory(id)};$modal.open({templateUrl:"modules/stories/views/move-to-sprint.client.view.html",controller:["$scope","$modalInstance","sprints","story",function($scope,$modalInstance,sprints,story){$scope.sprints=sprints,$scope.move=function(sprint){$http.put("/projects/"+$stateParams.projectId+"/storiesBacklog",{story:story,sprintId:sprint._id}).success(function(){moveStory(story._id),SocketPB.emit("story.deleted",{id:story._id,room:$stateParams.projectId}),$modalInstance.close(story)})},$scope.cancel=function(){$modalInstance.dismiss("cancel")}}],size:size,resolve:{sprints:function(){return sprints.then(function(response){return response.data})},story:function(){return selectedStory}}})}}]),storiesApp.controller("StoriesEditController",["$scope","$stateParams","Authentication","$location","$http","$log",function($scope,$stateParams,Authentication,$location,$http){$scope.authentication=Authentication,$scope.authentication.user||$location.path("/"),$scope.priorities=["MUST","SHOULD","COULD","WON'T"],$http.get("/projects/"+$stateParams.projectId+"/members").then(function(response){$scope.members=response.data}),$scope.showMembers=function(story){var selected=[];return angular.forEach($scope.members,function(m){story.users.indexOf(m._id)>=0&&selected.push(m.username)}),selected.length?selected.join(", "):"No user assigned"},$scope.update=function(updatedStory){var story=updatedStory;story.$update({storyId:story._id})}}]),angular.module("stories").factory("SocketPB",["$rootScope",function($rootScope){var socket=io("/stories").connect();return{on:function(eventName,callback){socket.on(eventName,function(){var args=arguments;$rootScope.$apply(function(){callback.apply(socket,args)})})},emit:function(eventName,data,callback){socket.emit(eventName,data,function(){var args=arguments;$rootScope.$apply(function(){callback&&callback.apply(socket,args)})})}}}]),angular.module("stories").factory("Stories",["$resource",function($resource){return $resource("projects/:projectId/stories/:storyId",{projectId:"@projectId",storyId:"@storyId"},{update:{method:"PUT"}})}]);var tasksApp=angular.module("tasks");tasksApp.controller("TasksCreateUpdateController",["$scope","$stateParams","Authentication","$location","Tasks","SocketSprint",function($scope,$stateParams,Authentication,$location,Tasks,SocketSprint){$scope.authentication=Authentication,$scope.authentication.user||$location.path("/"),$scope.priorities=["VERY HIGH","HIGH","MEDIUM","LOW","VERY LOW"],$scope.createTask=function(story){var t=new Tasks({taskName:this.taskName,taskDescription:this.taskDescription,taskPriority:this.taskPriority,taskHours:this.taskHours,taskRemark:this.taskRemark,taskRuleValidation:this.taskRuleValidation});t.$save({storyId:story._id},function(task){SocketSprint.emit("task.created",{task:task,room:story.sprintId}),$scope.taskName="",$scope.taskDescription="",$scope.taskPriority={},$scope.taskHours="",$scope.taskRemark="",$scope.taskRuleValidation=""})},$scope.updateTask=function(updatedTask){var task=updatedTask;task.$update({storyId:task.storyId,taskId:task._id},function(response){SocketSprint.emit("task.updated",{task:response,room:$stateParams.sprintId})},function(errorResponse){$scope.error=errorResponse.data.message})}}]),angular.module("tasks").factory("Tasks",["$resource",function($resource){return $resource("stories/:storyId/tasks/:taskId",{storyId:"@storyId",taskId:"@taskId"},{update:{method:"PUT"}})}]),angular.module("users").config(["$httpProvider",function($httpProvider){$httpProvider.interceptors.push(["$q","$location","Authentication",function($q,$location,Authentication){return{responseError:function(rejection){switch(rejection.status){case 401:Authentication.user=null,$location.path("signin");break;case 403:}return $q.reject(rejection)}}}])}]),angular.module("users").config(["$stateProvider",function($stateProvider){$stateProvider.state("profile",{url:"/settings/profile",templateUrl:"modules/users/views/settings/edit-profile.client.view.html"}).state("password",{url:"/settings/password",templateUrl:"modules/users/views/settings/change-password.client.view.html"}).state("signup",{url:"/signup",templateUrl:"modules/users/views/authentication/signup.client.view.html"}).state("signin",{url:"/signin",templateUrl:"modules/users/views/authentication/signin.client.view.html"}).state("forgot",{url:"/password/forgot",templateUrl:"modules/users/views/password/forgot-password.client.view.html"}).state("reset-invalid",{url:"/password/reset/invalid",templateUrl:"modules/users/views/password/reset-password-invalid.client.view.html"}).state("reset-success",{url:"/password/reset/success",templateUrl:"modules/users/views/password/reset-password-success.client.view.html"}).state("reset",{url:"/password/reset/:token",templateUrl:"modules/users/views/password/reset-password.client.view.html"})}]),angular.module("users").controller("AuthenticationController",["$scope","$http","$location","Authentication",function($scope,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.signup=function(){$http.post("/auth/signup",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})},$scope.signin=function(){$http.post("/auth/signin",$scope.credentials).success(function(response){$scope.authentication.user=response,$location.path("/")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("PasswordController",["$scope","$stateParams","$http","$location","Authentication",function($scope,$stateParams,$http,$location,Authentication){$scope.authentication=Authentication,$scope.authentication.user&&$location.path("/"),$scope.askForPasswordReset=function(){$scope.success=$scope.error=null,$http.post("/auth/forgot",$scope.credentials).success(function(response){$scope.credentials=null,$scope.success=response.message}).error(function(response){$scope.credentials=null,$scope.error=response.message})},$scope.resetUserPassword=function(){$scope.success=$scope.error=null,$http.post("/auth/reset/"+$stateParams.token,$scope.passwordDetails).success(function(response){$scope.passwordDetails=null,Authentication.user=response,$location.path("/password/reset/success")}).error(function(response){$scope.error=response.message})}}]),angular.module("users").controller("SettingsController",["$scope","$http","$location","Users","Authentication",function($scope,$http,$location,Users,Authentication){$scope.user=Authentication.user,$scope.user||$location.path("/"),$scope.updateUserProfile=function(isValid){if(isValid){$scope.success=$scope.error=null;var user=new Users($scope.user);user.$update(function(response){$scope.success=!0,Authentication.user=response},function(response){$scope.error=response.data.message})}else $scope.submitted=!0},$scope.changeUserPassword=function(){$scope.success=$scope.error=null,$http.post("/users/password",$scope.passwordDetails).success(function(){$scope.success=!0,$scope.passwordDetails=null}).error(function(response){$scope.error=response.message})}}]),angular.module("users").factory("Authentication",[function(){var _this=this;return _this._data={user:window.user},_this._data}]),angular.module("users").factory("Users",["$resource",function($resource){return $resource("users",{},{update:{method:"PUT"}})}]);